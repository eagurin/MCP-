#!/usr/bin/env python3
"""
GitHub Agent Orchestrator - –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import logging
from typing import Optional

from src.agents import ClaudeSquadManager
from src.github_manager import GitHubManager  
from src.health_monitor import HealthMonitor
from src.models import Agent, Task

logger = logging.getLogger(__name__)


class GitHubAgentOrchestrator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ GitHub –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(
        self,
        github_token: str,
        repo_name: str,
        anthropic_api_key: Optional[str] = None,
        check_interval: int = 300,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            github_token: GitHub —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API
            repo_name: –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "owner/repo"
            anthropic_api_key: API –∫–ª—é—á Anthropic (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.github_token = github_token
        self.repo_name = repo_name
        self.anthropic_api_key = anthropic_api_key
        self.check_interval = check_interval
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.github_manager = GitHubManager(github_token, repo_name)
        self.claude_manager = ClaudeSquadManager()
        self.health_monitor = HealthMonitor()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.running = False
        self.agents = {}
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ GitHub Agent Orchestrator")
        logger.info(f"üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {self.repo_name}")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval}—Å")
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        await asyncio.gather(
            self._main_loop(),
            self.health_monitor.start(),
            return_exceptions=True
        )
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–≥–µ–Ω—Ç—ã
        for agent_id, agent in self.agents.items():
            logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ {agent_id}")
            await self.claude_manager.stop_agent(agent_id)
            
        await self.health_monitor.stop()
        
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ issues
                tasks = await self.github_manager.get_open_issues()
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
                for task in tasks:
                    await self._process_task(task)
                    
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
    async def _process_task(self, task: Task):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ - —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        agent_id = f"agent_{task.id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–≥–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        if agent_id in self.agents:
            logger.debug(f"ü§ñ –ê–≥–µ–Ω—Ç {agent_id} –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{task.id}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–∞
            return
            
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –±–µ–∑ –∞–≥–µ–Ω—Ç–∞
        logger.debug(f"üìã –ó–∞–¥–∞—á–∞ #{task.id} –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {task.title}")
    
    async def assign_agent_to_task(self, task_id: int) -> bool:
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–¥–∞—á—É –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ CLI"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
        tasks = await self.github_manager.get_open_issues()
        task = next((t for t in tasks if t.id == task_id), None)
        
        if not task:
            logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        agent_id = f"agent_{task.id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–≥–µ–Ω—Ç–∞
        if agent_id in self.agents:
            logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent_id} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É #{task.id}")
            return False
        
        logger.info(f"üë• –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ {agent_id} –¥–ª—è –∑–∞–¥–∞—á–∏ #{task.id}: {task.title}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ù–ê–°–¢–û–Ø–©–ò–ô Claude Squad –ø—Ä–æ—Ü–µ—Å—Å
            success = await self._create_real_claude_squad_agent(task, agent_id)
            
            if success:
                self.agents[agent_id] = {
                    "task_id": task.id,
                    "task_title": task.title,
                    "status": "working",
                    "created_at": asyncio.get_event_loop().time()
                }
                logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ GitHub
                comment = f"ü§ñ –ê–≥–µ–Ω—Ç {agent_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É –∏ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.\n\nüîÑ –°—Ç–∞—Ç—É—Å: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è..."
                await self.github_manager.create_comment(task.id, comment)
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ #{task.id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ #{task.id}: {e}")
            return False
    
    async def remove_agent_from_task(self, task_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–¥–∞—á–∏"""
        agent_id = f"agent_{task_id}"
        
        if agent_id not in self.agents:
            logger.error(f"‚ùå –ê–≥–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        agent_info = self.agents[agent_id]
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Claude Squad –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if "process" in agent_info:
            process = agent_info["process"]
            try:
                process.terminate()
                await process.wait()
                logger.info(f"üõë –ü—Ä–æ—Ü–µ—Å—Å –∞–≥–µ–Ω—Ç–∞ {agent_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if "prompt_file" in agent_info:
            try:
                os.unlink(agent_info["prompt_file"])
            except:
                pass
                
        # –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        del self.agents[agent_id]
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ GitHub
        comment = f"üõë –ê–≥–µ–Ω—Ç {agent_id} —Å–Ω—è—Ç —Å –∑–∞–¥–∞—á–∏"
        await self.github_manager.create_comment(task_id, comment)
        
        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_id} —É–¥–∞–ª–µ–Ω —Å –∑–∞–¥–∞—á–∏ #{task_id}")
        return True
            
    async def _create_real_claude_squad_agent(self, task: Task, agent_id: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ù–ê–°–¢–û–Ø–©–ï–ì–û Claude Squad –∞–≥–µ–Ω—Ç–∞"""
        import subprocess
        import tempfile
        import os
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º
            prompt = f"""–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GitHub –∞–≥–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (ID: {agent_id}).

–ó–ê–î–ê–ß–ê #{task.id}: {task.title}

–û–ü–ò–°–ê–ù–ò–ï:
{task.body}

–ú–ï–¢–ö–ò: {', '.join(task.labels)}
URL: {task.url}

–¢–í–û–Ø –†–û–õ–¨:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–µ—Ç–∞–ª—å–Ω–æ
2. –°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ 
3. –ù–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –∏–∑—É—á–∏ –∫–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
4. –†–µ–∞–ª–∏–∑—É–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ä–µ—à–µ–Ω–∏–µ
6. –°–æ–∑–¥–∞–π pull request
7. –û–±–Ω–æ–≤–ª—è–π —Å—Ç–∞—Ç—É—Å –≤ GitHub –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –†–∞–±–æ—Ç–∞–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–ª—å –∫–æ–¥–∞
- –¢–µ—Å—Ç–∏—Ä—É–π –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –°–æ–æ–±—â–∞–π –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö GitHub

–ù–ê–ß–ù–ò –†–ê–ë–û–¢–£:
–°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. 
–û—Ç–ø—Ä–∞–≤—å –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ GitHub issue.
"""
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
                f.write(prompt)
                prompt_file = f.name
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Claude Squad —Å –ø—Ä–æ–º–ø—Ç–æ–º
            cmd = [
                'cs', 
                '--program', 
                f'claude --prompt-file {prompt_file}',
                '--autoyes'
            ]
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Claude Squad: {' '.join(cmd)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ñ–æ–Ω–µ
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=os.getcwd()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
            self.agents[agent_id] = {
                "process": process,
                "prompt_file": prompt_file,
                "task_id": task.id,
                "status": "starting"
            }
            
            logger.info(f"‚úÖ Claude Squad –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –¥–ª—è {agent_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Claude Squad: {e}")
            return False