"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏ Claude –∏ Claude Squad
"""

import asyncio
import json
import logging
import os
import subprocess
import time
from datetime import datetime
from typing import Any, Dict, Optional

import anthropic

from src.models import Agent, AgentStatus, Task

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Claude Code SDK
try:
    from claude_code_sdk import query, ClaudeCodeOptions
    CLAUDE_CODE_SDK_AVAILABLE = True
except ImportError:
    CLAUDE_CODE_SDK_AVAILABLE = False

logger = logging.getLogger(__name__)


class ClaudeSquadManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude Squad v1.0.8+"""

    def __init__(self):
        self.squad_available = self._check_claude_squad_availability()
        self.active_sessions: Dict[str, Dict[str, Any]] = {}
        self.daemon_started = False

        if self.squad_available:
            logger.info("Claude Squad v1.0.8+ –¥–æ—Å—Ç—É–ø–µ–Ω")
            # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ daemon –∏ tmux, 
            # –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ API –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ API –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Claude")
        else:
            logger.warning(
                "Claude Squad –Ω–µ –Ω–∞–π–¥–µ–Ω - –∞–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ API"
            )

    def _check_claude_squad_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Claude Squad"""
        try:
            result = subprocess.run(["cs", "version"], capture_output=True, text=True)
            if result.returncode == 0:
                version_info = result.stdout.strip()
                logger.info(f"–ù–∞–π–¥–µ–Ω Claude Squad: {version_info}")
                return True
            return False
        except Exception:
            return False

    async def create_squad_session(self, task: Task, agent_id: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v1.0.8+)"""
        if not self.squad_available:
            return False

        try:
            # –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Claude Squad –º—ã —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é
            # –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ tmux —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            session_name = f"github-task-{task.id}"
            
            self.active_sessions[agent_id] = {
                "session_name": session_name,
                "task_id": task.id,
                "created_at": datetime.now(),
                "status": "active",
                "prompt": self._generate_squad_prompt(task, agent_id),
                "squad_version": "1.0.8+",
            }
            
            logger.info(
                f"–°–æ–∑–¥–∞–Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∞—è Claude Squad —Å–µ—Å—Å–∏—è {session_name} –¥–ª—è –∑–∞–¥–∞—á–∏ #{task.id}"
            )
            logger.info(f"–°–µ—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ 'cs' command")
            return True

        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Claude Squad —Å–µ—Å—Å–∏–∏: {e}")
            return False

    def _generate_squad_prompt(self, task: Task, agent_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Claude Squad"""
        return f"""–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ GitHub (ID: {agent_id}).

–ó–ê–î–ê–ß–ê: {task.title}

–û–ü–ò–°–ê–ù–ò–ï:
{task.body}

–ú–ï–¢–ö–ò: {', '.join(task.labels)}
URL: {task.url}

–¢–í–û–Ø –†–û–õ–¨:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
2. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
3. –†–µ–∞–ª–∏–∑—É–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ä–µ—à–µ–Ω–∏–µ
5. –°–æ–∑–¥–∞–π pull request
6. –û–±–Ω–æ–≤–ª—è–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –†–∞–±–æ—Ç–∞–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ, –Ω–æ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Å—Ç–∏–ª—å –∫–æ–¥–∞
- –í—Å–µ–≥–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ commit
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –°–æ–æ–±—â–∞–π –æ –±–ª–æ–∫–µ—Ä–∞—Ö –∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö

–û–¢–ß–ï–¢–ù–û–°–¢–¨:
- –û—Å—Ç–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ GitHub issue –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤: üîÑ —Ä–∞–±–æ—Ç–∞, ‚úÖ –≥–æ—Ç–æ–≤–æ, ‚ùå –ø—Ä–æ–±–ª–µ–º–∞
- –û–±–Ω–æ–≤–ª—è–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã

–ù–∞—á–Ω–∏ —Å –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""

    async def check_session_status(self, agent_id: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
        if agent_id not in self.active_sessions:
            return "not_found"

        session_info = self.active_sessions[agent_id]
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            if session_info.get("status") == "active":
                # –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Claude Squad —Å–µ—Å—Å–∏–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
                # –ü–æ—ç—Ç–æ–º—É —Å—á–∏—Ç–∞–µ–º —Å–µ—Å—Å–∏—é –∞–∫—Ç–∏–≤–Ω–æ–π –µ—Å–ª–∏ –æ–Ω–∞ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                return "active"
            else:
                return "inactive"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏ {agent_id}: {e}")
            return "error"

    async def restart_session(self, agent_id: str, task: Task) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        if agent_id in self.active_sessions:
            await self.terminate_session(agent_id)

        return await self.create_squad_session(task, agent_id)

    async def terminate_session(self, agent_id: str) -> bool:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
        if agent_id not in self.active_sessions:
            return True

        session_info = self.active_sessions[agent_id]
        session_name = session_info["session_name"]

        try:
            # –ü–æ–º–µ—á–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
            del self.active_sessions[agent_id]
            logger.info(f"–õ–æ–≥–∏—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è {session_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            logger.info(f"–î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: cs reset")
            return True

        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {agent_id}: {e}")
            return False

    async def send_message_to_session(self, agent_id: str, message: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        if agent_id not in self.active_sessions:
            return False

        session_info = self.active_sessions[agent_id]
        session_name = session_info["session_name"]

        try:
            # –í –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Claude Squad —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
            # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}: {message[:100]}...")
            logger.info(f"–î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: cs")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ {agent_id}: {e}")
            return False

    def get_session_prompt(self, agent_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        if agent_id not in self.active_sessions:
            return None
        
        session_info = self.active_sessions[agent_id]
        return session_info.get("prompt")

    def list_active_sessions(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"""
        return self.active_sessions.copy()


class ClaudeAgentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude –∞–≥–µ–Ω—Ç–∞–º–∏"""

    def __init__(self, api_key: Optional[str] = None):
        self.anthropic_api_key = api_key
        self.claude_client = None
        self.enabled = False
        self.connection_type = "none"
        self.squad_manager = ClaudeSquadManager()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Claude
        if CLAUDE_CODE_SDK_AVAILABLE:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Claude Code SDK
                self.enabled = True
                self.connection_type = "claude_code_sdk"
                logger.info("Claude –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Claude Code SDK")
            except Exception as e:
                logger.debug(f"Claude Code SDK —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        
        if not self.enabled:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Anthropic API
                if api_key:
                    self.claude_client = anthropic.Anthropic(api_key=api_key)
                    self.enabled = True
                    self.connection_type = "anthropic_api"
                    logger.info("Claude –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Anthropic API")
                else:
                    self.claude_client = anthropic.Anthropic()
                    self.enabled = True
                    self.connection_type = "claude_code"
                    logger.info("Claude –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Claude Code")
            except Exception as e:
                logger.debug(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Anthropic API –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")

                # Fallback –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
                if os.getenv("CLAUDE_CODE_USE_BEDROCK") == "1":
                    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Amazon Bedrock
                    try:
                        self.claude_client = anthropic.Anthropic()
                        self.enabled = True
                        self.connection_type = "bedrock"
                        logger.info("Claude –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Amazon Bedrock")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Bedrock: {e}")
                elif os.getenv("CLAUDE_CODE_USE_VERTEX") == "1":
                    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vertex AI
                    try:
                        self.claude_client = anthropic.Anthropic()
                        self.enabled = True
                        self.connection_type = "vertex_ai"
                        logger.info("Claude –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Google Vertex AI")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Vertex AI: {e}")

            if not self.enabled:
                logger.info(
                    "Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Claude Squad –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏"
                )
                logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
                logger.info("  1. Claude Code SDK (pip install claude-code-sdk)")
                logger.info("  2. Claude Code CLI (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)")
                logger.info("  3. ANTHROPIC_API_KEY=your_key")
                logger.info(
                    "  4. CLAUDE_CODE_USE_BEDROCK=1 (—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π AWS credentials)"
                )
                logger.info(
                    "  5. CLAUDE_CODE_USE_VERTEX=1 (—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Google Cloud credentials)"
                )

    def get_connection_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.enabled:
            return "–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"

        return {
            "claude_code_sdk": "Claude Code SDK",
            "claude_code": "Claude Code (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
            "anthropic_api": "Anthropic API",
            "bedrock": "Amazon Bedrock",
            "vertex_ai": "Google Vertex AI",
            "none": "–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
        }.get(self.connection_type, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

    async def create_agent_for_task(self, task: Task) -> Agent:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        agent_id = f"agent_{task.id}_{int(time.time())}"

        agent = Agent(
            id=agent_id,
            task_id=task.id,
            status=AgentStatus.IDLE,
            created_at=datetime.now(),
            last_heartbeat=datetime.now(),
            claude_client=self.claude_client,
            squad_session_active=False,
        )

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å Claude Squad —Å–µ—Å—Å–∏—é
        if self.squad_manager.squad_available:
            squad_success = await self.squad_manager.create_squad_session(
                task, agent_id
            )
            if squad_success:
                agent.squad_session_active = True
                logger.info(f"–ê–≥–µ–Ω—Ç {agent_id} —Å–æ–∑–¥–∞–Ω —Å Claude Squad —Å–µ—Å—Å–∏–µ–π")
            else:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Claude Squad —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_id}"
                )

        logger.info(f"–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç {agent_id} –¥–ª—è –∑–∞–¥–∞—á–∏ #{task.id}")
        return agent

    async def analyze_task(self, agent: Agent, task: Task) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é Claude"""
        if not self.enabled or not self.claude_client:
            logger.warning("Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            return {
                "type": "unknown",
                "priority": "medium", 
                "estimated_time": "unknown",
                "skills": [],
                "dependencies": [],
                "plan": [
                    "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏",
                    "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                    "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è",
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
                ]
            }

        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:

            –ó–∞–≥–æ–ª–æ–≤–æ–∫: {task.title}
            –û–ø–∏—Å–∞–Ω–∏–µ: {task.body}
            –ú–µ—Ç–∫–∏: {', '.join(task.labels)}
            URL: {task.url}

            –û–ø—Ä–µ–¥–µ–ª–∏:
            1. –¢–∏–ø –∑–∞–¥–∞—á–∏ (bug, feature, documentation, refactoring, etc.)
            2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (high, medium, low)
            3. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            4. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            5. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á
            6. –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤)

            –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            """

            message = self.claude_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=2000,
                messages=[{"role": "user", "content": prompt}],
            )

            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç Claude
            response_text = message.content[0].text

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
                start_idx = response_text.find("{")
                end_idx = response_text.rfind("}") + 1
                if start_idx != -1 and end_idx != -1:
                    json_str = response_text[start_idx:end_idx]
                    analysis = json.loads(json_str)
                else:
                    # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                    analysis = {
                        "type": "unknown",
                        "priority": "medium",
                        "estimated_time": "unknown",
                        "skills": [],
                        "dependencies": [],
                        "plan": [
                            "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏",
                            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                            "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è",
                            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                        ],
                    }
            except json.JSONDecodeError:
                analysis = {
                    "type": "unknown",
                    "priority": "medium",
                    "estimated_time": "unknown",
                    "skills": [],
                    "dependencies": [],
                    "plan": [
                        "–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏",
                        "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                        "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è",
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    ],
                    "raw_response": response_text,
                }

            agent.last_heartbeat = datetime.now()
            logger.info(f"–ê–≥–µ–Ω—Ç {agent.id} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É #{task.id}")
            return analysis

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º {agent.id}: {e}")
            agent.error_count += 1
            agent.status = AgentStatus.ERROR
            return {"error": str(e)}

    async def execute_task_step(
        self, agent: Agent, task: Task, step: str, context: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ –∑–∞–¥–∞—á–∏"""
        if not self.enabled or not self.claude_client:
            logger.warning("Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            agent.last_heartbeat = datetime.now()
            agent.status = AgentStatus.WORKING
            return {
                "status": "in_progress",
                "result": f"–ë–∞–∑–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ '{step}' –¥–ª—è –∑–∞–¥–∞—á–∏ {task.title}",
                "next_actions": ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É"],
                "issues": ["Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"],
                "completion_percentage": 25
            }

        try:
            prompt = f"""
            –¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π GitHub.

            –ó–∞–¥–∞—á–∞: {task.title}
            –û–ø–∏—Å–∞–Ω–∏–µ: {task.body}
            –¢–µ–∫—É—â–∏–π —à–∞–≥: {step}
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {json.dumps(context, ensure_ascii=False, indent=2)}

            –í—ã–ø–æ–ª–Ω–∏ —ç—Ç–æ—Ç —à–∞–≥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
            1. –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (completed, in_progress, blocked, failed)
            2. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            3. –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            4. –õ—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
            5. –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ–π –∑–∞–¥–∞—á–∏

            –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            """

            message = self.claude_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=1500,
                messages=[{"role": "user", "content": prompt}],
            )

            response_text = message.content[0].text

            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                start_idx = response_text.find("{")
                end_idx = response_text.rfind("}") + 1
                if start_idx != -1 and end_idx != -1:
                    json_str = response_text[start_idx:end_idx]
                    result = json.loads(json_str)
                else:
                    result = {
                        "status": "in_progress",
                        "result": response_text,
                        "next_actions": ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É"],
                        "issues": [],
                        "completion_percentage": 50,
                    }
            except json.JSONDecodeError:
                result = {
                    "status": "in_progress",
                    "result": response_text,
                    "next_actions": ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É"],
                    "issues": [],
                    "completion_percentage": 50,
                    "raw_response": response_text,
                }

            agent.last_heartbeat = datetime.now()
            agent.status = AgentStatus.WORKING

            logger.info(f"–ê–≥–µ–Ω—Ç {agent.id} –≤—ã–ø–æ–ª–Ω–∏–ª —à–∞–≥ '{step}' –¥–ª—è –∑–∞–¥–∞—á–∏ #{task.id}")
            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ –∞–≥–µ–Ω—Ç–æ–º {agent.id}: {e}")
            agent.error_count += 1
            agent.status = AgentStatus.ERROR
            return {"status": "failed", "error": str(e)}
