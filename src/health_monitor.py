"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–æ–≤
"""

import logging
from datetime import datetime, timedelta
from typing import List

from src.agents import ClaudeAgentManager
from src.models import Agent, AgentStatus

logger = logging.getLogger(__name__)


class HealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤"""

    def __init__(self, check_interval: int = 300):  # 5 –º–∏–Ω—É—Ç
        self.check_interval = check_interval
        self.last_check = datetime.now()
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = True
        logger.info("üîç –ó–∞–ø—É—Å–∫ HealthMonitor")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HealthMonitor")

    async def is_agent_healthy(
        self, agent: Agent, claude_manager: ClaudeAgentManager
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        now = datetime.now()

        # –ê–≥–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–º –µ—Å–ª–∏:
        # 1. –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        # 2. –ù–µ—Ç heartbeat –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç
        # 3. –°—Ç–∞—Ç—É—Å ERROR
        # 4. Claude Squad —Å–µ—Å—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

        if agent.error_count >= agent.max_errors:
            return False

        if now - agent.last_heartbeat > timedelta(minutes=10):
            return False

        if agent.status == AgentStatus.ERROR:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Claude Squad —Å–µ—Å—Å–∏–∏
        if agent.squad_session_active:
            session_status = await claude_manager.squad_manager.check_session_status(
                agent.id
            )
            if session_status not in ["active"]:
                logger.warning(
                    f"–ê–≥–µ–Ω—Ç {agent.id}: Claude Squad —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ({session_status})"
                )
                return False

        return True

    async def get_unhealthy_agents(
        self, agents: List[Agent], claude_manager: ClaudeAgentManager
    ) -> List[Agent]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        unhealthy_agents = []
        for agent in agents:
            if not await self.is_agent_healthy(agent, claude_manager):
                unhealthy_agents.append(agent)
        return unhealthy_agents
