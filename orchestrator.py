#!/usr/bin/env python3
"""
GitHub Agent Orchestrator - –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–æ—Ä
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GitHub —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π —Å –ø–æ–º–æ—â—å—é Claude –∞–≥–µ–Ω—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python orchestrator.py                 # –ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    python orchestrator.py --status        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞  
    python orchestrator.py --help-claude   # –†–∞–±–æ—Ç–∞ —Å Claude Squad
"""

import argparse
import asyncio
import os
import subprocess
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = Path(__file__).parent / ".env"
if env_file.exists():
    try:
        from dotenv import load_dotenv
        load_dotenv(env_file)
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def check_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    # Import check_status from the root run.py
    import sys
    from pathlib import Path
    
    # Add root directory to path
    root_path = Path(__file__).parent
    if str(root_path) not in sys.path:
        sys.path.insert(0, str(root_path))
    
    from run import check_status as run_check_status
    return run_check_status()

def help_claude():
    """–ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å Claude Squad"""
    print("üéØ Claude Squad Helper")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    try:
        result = subprocess.run([
            sys.executable, "src/claude_squad_helper.py", "--sessions"
        ], capture_output=True, text=True, cwd=Path(__file__).parent)
        
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  python src/claude_squad_helper.py --sessions    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏")
    print("  python src/claude_squad_helper.py --prompt 11   # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–¥–∞—á–∏")
    print("  python src/claude_squad_helper.py --launch      # –ó–∞–ø—É—Å–∫ Claude Squad")
    print("  cs                                              # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="GitHub Agent Orchestrator",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python orchestrator.py                 # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
  python orchestrator.py --status        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  python orchestrator.py --help-claude   # –ü–æ–º–æ—â—å –ø–æ Claude Squad
        """
    )
    
    parser.add_argument(
        "--status", action="store_true",
        help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"
    )
    
    parser.add_argument(
        "--help-claude", action="store_true", 
        help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å Claude Squad"
    )
    
    args = parser.parse_args()
    
    print("üöÄ GitHub Agent Orchestrator")
    print("=" * 50)
    
    if args.status:
        check_status()
        return
        
    if args.help_claude:
        help_claude()
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
    print("üì¶ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("üí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude Squad: python orchestrator.py --help-claude")
    print("=" * 50)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑ src –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        sys.path.insert(0, str(Path(__file__).parent / "src"))
        import main
        asyncio.run(main.main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()