#!/usr/bin/env python3
"""
GitHub Agent Orchestrator - Interactive CLI
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª

Usage: uv run agent_cli.py
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

import click
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm, Prompt
from rich.table import Table

# Add current directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

from src.agents import ClaudeAgentManager
from src.github_manager import GitHubManager
from src.health_monitor import HealthMonitor
from src.models import Agent, AgentStatus, Task

# Load environment variables
env_file = Path(".env")
if env_file.exists():
    from dotenv import load_dotenv

    load_dotenv()

console = Console()
STATE_FILE = Path("agent_state.json")


class AgentController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏"""

    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.github_token = os.getenv("GITHUB_TOKEN")
        self.anthropic_api_key = os.getenv("ANTHROPIC_API_KEY")
        self.repo_name = os.getenv("GITHUB_REPO")

        if not all([self.github_token, self.repo_name]):
            console.print(
                "‚ùå [red]–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã GITHUB_TOKEN –∏–ª–∏ GITHUB_REPO[/red]"
            )
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.github_manager = GitHubManager(self.github_token, self.repo_name)
        self.claude_manager = ClaudeAgentManager(self.anthropic_api_key)
        self.health_monitor = HealthMonitor()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Claude
        if self.claude_manager.enabled:
            console.print(
                f"ü§ñ [green]Claude –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ {self.claude_manager.get_connection_info()}[/green]"
            )
        else:
            console.print(
                "‚ö†Ô∏è  [yellow]Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è[/yellow]"
            )

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≥–µ–Ω—Ç–æ–≤
        self.agents: Dict[str, Agent] = {}
        self.task_assignments: Dict[int, str] = {}  # task_id -> agent_id

        # –§–ª–∞–≥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
        self.monitoring_task: Optional[asyncio.Task] = None
        self.monitoring_enabled = False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.load_state()

    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            state = {
                "task_assignments": self.task_assignments,
                "agents": {},
                "timestamp": datetime.now().isoformat(),
            }

            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
            for agent_id, agent in self.agents.items():
                state["agents"][agent_id] = {
                    "id": agent.id,
                    "task_id": agent.task_id,
                    "status": agent.status.value,
                    "created_at": agent.created_at.isoformat(),
                    "last_heartbeat": agent.last_heartbeat.isoformat(),
                    "error_count": agent.error_count,
                    "max_errors": agent.max_errors,
                }

            with open(STATE_FILE, "w", encoding="utf-8") as f:
                json.dump(state, f, indent=2, ensure_ascii=False)

        except Exception as e:
            console.print(f"‚ö†Ô∏è  [yellow]–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}[/yellow]")

    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not STATE_FILE.exists():
                return

            with open(STATE_FILE, encoding="utf-8") as f:
                state = json.load(f)

            self.task_assignments = state.get("task_assignments", {})
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
            self.task_assignments = {
                int(k): v for k, v in self.task_assignments.items()
            }

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
            agents_data = state.get("agents", {})
            for agent_id, agent_data in agents_data.items():
                try:
                    agent = Agent(
                        id=agent_data["id"],
                        task_id=agent_data["task_id"],
                        status=AgentStatus(agent_data["status"]),
                        created_at=datetime.fromisoformat(agent_data["created_at"]),
                        last_heartbeat=datetime.fromisoformat(
                            agent_data["last_heartbeat"]
                        ),
                        claude_client=self.claude_manager.claude_client,
                        error_count=agent_data.get("error_count", 0),
                        max_errors=agent_data.get("max_errors", 3),
                    )
                    self.agents[agent_id] = agent
                except Exception as e:
                    console.print(
                        f"‚ö†Ô∏è  [yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ {agent_id}: {e}[/yellow]"
                    )

            if self.agents or self.task_assignments:
                console.print(
                    f"üìÇ [dim]–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {len(self.agents)} –∞–≥–µ–Ω—Ç–æ–≤, {len(self.task_assignments)} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π[/dim]"
                )

        except Exception as e:
            console.print(f"‚ö†Ô∏è  [yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}[/yellow]")

    async def load_tasks(self) -> List[Task]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ GitHub"""
        return await self.github_manager.get_open_issues()

    def display_tasks(self, tasks: List[Task], show_assigned=True):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        table = Table(title="üìã GitHub Issues")
        table.add_column("ID", style="cyan", no_wrap=True)
        table.add_column("–ó–∞–≥–æ–ª–æ–≤–æ–∫", style="white")
        table.add_column("–ú–µ—Ç–∫–∏", style="yellow")
        table.add_column("–ê–≥–µ–Ω—Ç", style="green")
        table.add_column("–°–æ–∑–¥–∞–Ω–æ", style="dim")

        for task in tasks:
            agent_info = "‚Äî"
            if task.id in self.task_assignments:
                agent_id = self.task_assignments[task.id]
                if agent_id in self.agents:
                    agent = self.agents[agent_id]
                    status_color = {
                        AgentStatus.IDLE: "blue",
                        AgentStatus.WORKING: "green",
                        AgentStatus.ERROR: "red",
                        AgentStatus.COMPLETED: "bright_green",
                        AgentStatus.STOPPED: "dim",
                    }.get(agent.status, "white")
                    agent_info = f"[{status_color}]{agent.id}[/{status_color}]"

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if not show_assigned and task.id in self.task_assignments:
                continue

            labels = ", ".join(task.labels[:3]) if task.labels else "‚Äî"
            if len(task.labels) > 3:
                labels += "..."

            table.add_row(
                str(task.id),
                task.title[:50] + ("..." if len(task.title) > 50 else ""),
                labels,
                agent_info,
                task.created_at.strftime("%d.%m"),
            )

        console.print(table)

    def display_agents(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        if not self.agents:
            console.print("üì≠ [dim]–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤[/dim]")
            return

        table = Table(title="ü§ñ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã")
        table.add_column("ID –∞–≥–µ–Ω—Ç–∞", style="cyan", no_wrap=True)
        table.add_column("–ó–∞–¥–∞—á–∞", style="white")
        table.add_column("–°—Ç–∞—Ç—É—Å", style="white")
        table.add_column("–û—à–∏–±–∫–∏", style="red")
        table.add_column("–ü–æ—Å–ª–µ–¥–Ω–∏–π heartbeat", style="dim")

        for agent in self.agents.values():
            status_color = {
                AgentStatus.IDLE: "blue",
                AgentStatus.WORKING: "green",
                AgentStatus.ERROR: "red",
                AgentStatus.COMPLETED: "bright_green",
                AgentStatus.STOPPED: "dim",
            }.get(agent.status, "white")

            health = "‚ù§Ô∏è"  # –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è CLI

            table.add_row(
                agent.id,
                f"#{agent.task_id}",
                f"[{status_color}]{agent.status.value}[/{status_color}] {health}",
                str(agent.error_count),
                agent.last_heartbeat.strftime("%H:%M:%S"),
            )

        console.print(table)

    async def assign_agent_to_task(self, task_id: int) -> bool:
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–¥–∞—á—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–≥–µ–Ω—Ç –Ω–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ
        if task_id in self.task_assignments:
            console.print(
                f"‚ùå [red]–ù–∞ –∑–∞–¥–∞—á—É #{task_id} —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≥–µ–Ω—Ç {self.task_assignments[task_id]}[/red]"
            )
            return False

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
        tasks = await self.load_tasks()
        task = next((t for t in tasks if t.id == task_id), None)
        if not task:
            console.print(f"‚ùå [red]–ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/red]")
            return False

        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            agent = await self.claude_manager.create_agent_for_task(task)
            self.agents[agent.id] = agent
            self.task_assignments[task_id] = agent.id

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
            if self.claude_manager.enabled:
                with console.status(f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É #{task_id}..."):
                    analysis = await self.claude_manager.analyze_task(agent, task)

                console.print(
                    f"‚úÖ [green]–ê–≥–µ–Ω—Ç {agent.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É #{task_id}[/green]"
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
                analysis_panel = Panel(
                    f"**–¢–∏–ø:** {analysis.get('type', 'unknown')}\n"
                    f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {analysis.get('priority', 'medium')}\n"
                    f"**–í—Ä–µ–º—è:** {analysis.get('estimated_time', 'unknown')}\n"
                    f"**–ù–∞–≤—ã–∫–∏:** {', '.join(analysis.get('skills', []))[:50]}",
                    title="üß† –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏",
                    border_style="green",
                )
                console.print(analysis_panel)
            else:
                console.print(
                    f"‚úÖ [green]–ê–≥–µ–Ω—Ç {agent.id} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É #{task_id}[/green]"
                )
                console.print(
                    "‚ÑπÔ∏è  [blue]–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Claude –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)[/blue]"
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.save_state()
            return True

        except Exception as e:
            console.print(f"‚ùå [red]–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}[/red]")
            return False

    async def remove_agent_from_task(self, task_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–¥–∞—á–∏"""
        if task_id not in self.task_assignments:
            console.print(f"‚ùå [red]–ù–∞ –∑–∞–¥–∞—á–µ #{task_id} –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞[/red]")
            return False

        agent_id = self.task_assignments[task_id]

        if agent_id in self.agents:
            agent = self.agents[agent_id]
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ GitHub
            try:
                comment = (
                    f"üõë –ê–≥–µ–Ω—Ç {agent_id} –±—ã–ª —Å–Ω—è—Ç —Å –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
                self.github_manager.create_comment(task_id, comment)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

            del self.agents[agent_id]

        del self.task_assignments[task_id]
        console.print(f"‚úÖ [green]–ê–≥–µ–Ω—Ç —Å–Ω—è—Ç —Å –∑–∞–¥–∞—á–∏ #{task_id}[/green]")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.save_state()
        return True

    async def restart_agent(self, agent_id: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        if agent_id not in self.agents:
            console.print(f"‚ùå [red]–ê–≥–µ–Ω—Ç {agent_id} –Ω–µ –Ω–∞–π–¥–µ–Ω[/red]")
            return False

        agent = self.agents[agent_id]
        agent.error_count = 0
        agent.status = AgentStatus.IDLE
        agent.last_heartbeat = datetime.now()

        console.print(f"üîÑ [yellow]–ê–≥–µ–Ω—Ç {agent_id} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω[/yellow]")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.save_state()
        return True

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.monitoring_enabled:
            console.print("‚ùå [red]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω[/red]")
            return

        self.monitoring_enabled = True

        async def monitor_loop():
            while self.monitoring_enabled:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∞–≥–µ–Ω—Ç–æ–≤
                    unhealthy_agents = await self.health_monitor.get_unhealthy_agents(
                        list(self.agents.values()), self.claude_manager
                    )

                    for agent in unhealthy_agents:
                        console.print(
                            f"ü©∫ [yellow]–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π –∞–≥–µ–Ω—Ç {agent.id}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é...[/yellow]"
                        )
                        await self.restart_agent(agent.id)

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ GitHub
                        try:
                            comment = f"üîÑ –ê–≥–µ–Ω—Ç {agent.id} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é."
                            self.github_manager.create_comment(agent.task_id, comment)
                        except Exception:
                            pass

                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                except Exception as e:
                    console.print(f"‚ùå [red]–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}[/red]")
                    await asyncio.sleep(30)

        self.monitoring_task = asyncio.create_task(monitor_loop())
        console.print(
            "üü¢ [green]–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)[/green]"
        )

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.monitoring_enabled:
            console.print("‚ùå [red]–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω[/red]")
            return

        self.monitoring_enabled = False
        if self.monitoring_task:
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass

        console.print("üî¥ [red]–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/red]")


controller = AgentController()


@click.group()
def cli():
    """ü§ñ GitHub Agent Orchestrator - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏"""
    pass


@cli.command()
def tasks():
    """üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"""

    async def _show_tasks():
        tasks = await controller.load_tasks()
        controller.display_tasks(tasks)

    asyncio.run(_show_tasks())


@cli.command()
def agents():
    """ü§ñ –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    controller.display_agents()


@cli.command()
@click.argument("task_id", type=int)
def assign(task_id):
    """üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–¥–∞—á—É"""

    async def _assign():
        await controller.assign_agent_to_task(task_id)

    asyncio.run(_assign())


@cli.command()
@click.argument("task_id", type=int)
def remove(task_id):
    """üóëÔ∏è –°–Ω—è—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–¥–∞—á–∏"""

    async def _remove():
        await controller.remove_agent_from_task(task_id)

    asyncio.run(_remove())


@cli.command()
@click.argument("agent_id")
def restart(agent_id):
    """üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞"""

    async def _restart():
        await controller.restart_agent(agent_id)

    asyncio.run(_restart())


@cli.command()
def monitor():
    """üëÅÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""

    async def _monitor():
        await controller.start_monitoring()
        try:
            while controller.monitoring_enabled:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            await controller.stop_monitoring()

    asyncio.run(_monitor())


@cli.command()
def interactive():
    """üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""

    async def _interactive():
        console.print(
            Panel(
                "ü§ñ [bold cyan]GitHub Agent Orchestrator[/bold cyan]\n"
                "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏",
                border_style="cyan",
            )
        )

        while True:
            console.print("\n" + "=" * 50)
            console.print("[bold]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:[/bold]")
            console.print("1. üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
            console.print("2. ü§ñ –ü–æ–∫–∞–∑–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤")
            console.print("3. üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
            console.print("4. üóëÔ∏è  –°–Ω—è—Ç—å –∞–≥–µ–Ω—Ç–∞")
            console.print("5. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
            console.print("6. üëÅÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
            console.print("0. üö™ –í—ã—Ö–æ–¥")

            try:
                choice = Prompt.ask(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", choices=["0", "1", "2", "3", "4", "5", "6"]
                )

                if choice == "0":
                    if controller.monitoring_enabled:
                        await controller.stop_monitoring()
                    console.print("üëã [yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")
                    break

                elif choice == "1":
                    tasks = await controller.load_tasks()
                    controller.display_tasks(tasks)

                elif choice == "2":
                    controller.display_agents()

                elif choice == "3":
                    tasks = await controller.load_tasks()
                    unassigned_tasks = [
                        t for t in tasks if t.id not in controller.task_assignments
                    ]

                    if not unassigned_tasks:
                        console.print(
                            "üì≠ [dim]–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è[/dim]"
                        )
                        continue

                    controller.display_tasks(unassigned_tasks, show_assigned=False)
                    task_id = click.prompt("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏", type=int)
                    await controller.assign_agent_to_task(task_id)

                elif choice == "4":
                    if not controller.task_assignments:
                        console.print("üì≠ [dim]–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤[/dim]")
                        continue

                    console.print("–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
                    for task_id, agent_id in controller.task_assignments.items():
                        console.print(f"  ‚Ä¢ –ó–∞–¥–∞—á–∞ #{task_id} ‚Üí {agent_id}")

                    task_id = click.prompt("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏", type=int)
                    await controller.remove_agent_from_task(task_id)

                elif choice == "5":
                    if not controller.agents:
                        console.print("üì≠ [dim]–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤[/dim]")
                        continue

                    controller.display_agents()
                    agent_id = click.prompt("–í–≤–µ–¥–∏—Ç–µ ID –∞–≥–µ–Ω—Ç–∞")
                    await controller.restart_agent(agent_id)

                elif choice == "6":
                    if controller.monitoring_enabled:
                        if Confirm.ask("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥?"):
                            await controller.stop_monitoring()
                    else:
                        if Confirm.ask("üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥?"):
                            await controller.start_monitoring()

            except KeyboardInterrupt:
                if controller.monitoring_enabled:
                    await controller.stop_monitoring()
                console.print("\nüëã [yellow]–í—ã—Ö–æ–¥ –ø–æ Ctrl+C[/yellow]")
                break
            except Exception as e:
                console.print(f"‚ùå [red]–û—à–∏–±–∫–∞: {e}[/red]")

    asyncio.run(_interactive())


if __name__ == "__main__":
    cli()
