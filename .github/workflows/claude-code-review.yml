name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # File filtering for efficiency - only Python and config files
    paths:
      - "src/**/*.py"
      - "tests/**/*.py"
      - "poc/**/*.py"
      - "**/*.toml"
      - "**/*.txt"
      - "**/*.yml"
      - "**/*.yaml"

jobs:
  claude-review:
    # Conditional execution for efficiency - skip drafts and WIP
    if: |
      !github.event.pull_request.draft &&
      !contains(github.event.pull_request.title, '[skip-review]') &&
      !contains(github.event.pull_request.title, '[WIP]') &&
      !contains(github.event.pull_request.title, 'WIP:')
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # MCP-focused comprehensive review prompt
          direct_prompt: |
            –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∫–æ–¥-—Ä–µ–≤—å—é —ç—Ç–æ–≥–æ Pull Request –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ MCPISIA (MCP implementation):

            **–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å:**
            - üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ path traversal
            - üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ MCP: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—É MCP, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å tool definitions
            - ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: async/await –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å memory operations
            - üß™ –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: –ø–æ–∫—Ä—ã—Ç–∏–µ, edge cases, –º–æ–∫–∏ –¥–ª—è Redis
            - üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docstrings –Ω–∞ —Ä—É—Å—Å–∫–æ–º, type hints

            **–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:**
            - Filesystem operations: sandboxing, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤, —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            - Memory component: TTL –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, Redis fallback logic
            - Error handling: comprehensive but user-friendly
            - PEP 8 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–æ–¥ —Å—Ç–∏–ª—å

            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.

          # Efficiency optimization - sticky comments
          use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Python development tools for comprehensive analysis
          allowed_tools: |
            Bash(python -m pytest*),
            Bash(python -m black*),
            Bash(python -m flake8*),
            Bash(python -m mypy*),
            Bash(python -m isort*),
            Bash(python -m coverage*),
            Bash(git*), Bash(ls*), Bash(cat*), Bash(grep*)
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

